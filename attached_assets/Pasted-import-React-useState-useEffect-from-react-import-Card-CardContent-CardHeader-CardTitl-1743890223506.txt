import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Button } from '@/components/ui/button';
import { Info, RotateCcw } from 'lucide-react';

// Sample data structure - this would be replaced by actual API data
const sampleData = {
  "USA": [
    { id: 1, chefName: "Harold Dieterle", restaurantName: "Perilla", lat: 40.7308, lng: -74.0021, season: 1, city: "New York" },
    { id: 2, chefName: "Stephanie Izard", restaurantName: "Girl & the Goat", lat: 41.8847, lng: -87.6506, season: 4, city: "Chicago" },
    { id: 3, chefName: "Richard Blais", restaurantName: "Juniper & Ivy", lat: 32.7266, lng: -117.1692, season: 4, city: "San Diego" },
    { id: 4, chefName: "Michael Voltaggio", restaurantName: "ink.well", lat: 34.0522, lng: -118.2437, season: 6, city: "Los Angeles" },
    { id: 5, chefName: "Paul Qui", restaurantName: "Qui", lat: 30.2672, lng: -97.7431, season: 9, city: "Austin" },
    { id: 6, chefName: "Brooke Williamson", restaurantName: "Playa Provisions", lat: 33.9626, lng: -118.4301, season: 10, city: "Los Angeles" },
    { id: 7, chefName: "Joe Flamm", restaurantName: "Rose Mary", lat: 41.8855, lng: -87.6545, season: 15, city: "Chicago" },
    { id: 8, chefName: "Buddha Lo", restaurantName: "Huso", lat: 40.7645, lng: -73.9722, season: 19, city: "New York" }
  ],
  "France": [
    { id: 15, chefName: "Jean-Philippe Doux", restaurantName: "Le Jardin des Sens", lat: 48.8566, lng: 2.3522, season: 3, city: "Paris" },
    { id: 16, chefName: "Stéphanie Le Quellec", restaurantName: "La Scène", lat: 43.5298, lng: 5.4474, season: 2, city: "Aix-en-Provence" },
    { id: 17, chefName: "Xavier Pincemin", restaurantName: "Signature", lat: 45.7640, lng: 4.8357, season: 7, city: "Lyon" },
    { id: 18, chefName: "Coline Faulquier", restaurantName: "Signature", lat: 43.2965, lng: 5.3698, season: 7, city: "Marseille" }
  ],
  "Canada": [
    { id: 9, chefName: "Dale MacKay", restaurantName: "Ayden Kitchen & Bar", lat: 52.1332, lng: -106.6700, season: 1, city: "Saskatoon" },
    { id: 10, chefName: "Carl Heinrich", restaurantName: "Richmond Station", lat: 43.6515, lng: -79.3793, season: 2, city: "Toronto" }
  ],
  "UK": [
    { id: 11, chefName: "Neven Maguire", restaurantName: "MacNean House", lat: 54.2057, lng: -7.8754, season: 2, city: "Blacklion" },
    { id: 12, chefName: "Tom Kerridge", restaurantName: "The Hand and Flowers", lat: 51.5762, lng: -0.7777, season: 5, city: "Marlow" }
  ],
  "Australia": [
    { id: 13, chefName: "Adam Liaw", restaurantName: "Kuro", lat: -33.8688, lng: 151.2093, season: 2, city: "Sydney" },
    { id: 14, chefName: "Emelia Jackson", restaurantName: "Emelia Jackson Cake Co", lat: -37.8136, lng: 144.9631, season: 6, city: "Melbourne" }
  ]
};

// Countries list
const countries = Object.keys(sampleData);

const TopChefMap = () => {
  const [selectedCountry, setSelectedCountry] = useState("USA");
  const [map, setMap] = useState(null);
  const [markers, setMarkers] = useState([]);
  const [lastUpdated, setLastUpdated] = useState("May 15, 2024");
  const [infoCard, setInfoCard] = useState(null);

  useEffect(() => {
    // This would load the mapping library (like Google Maps) in a real implementation
    // For this prototype, we'll create a simplified map visualization
    initializeMap();
    
    return () => {
      // Cleanup function would remove map instance in a real implementation
    };
  }, []);

  useEffect(() => {
    if (map) {
      updateMarkers();
    }
  }, [selectedCountry, map]);

  const initializeMap = () => {
    // This would initialize the map with the actual mapping API
    // For our prototype, we'll just set a mock map object
    setMap({});
  };

  const updateMarkers = () => {
    // Clear existing markers
    markers.forEach(marker => {
      // In a real implementation, we would remove markers from the map
    });
    
    // Add new markers for the selected country
    const newMarkers = [];
    const countryData = sampleData[selectedCountry] || [];
    
    countryData.forEach(restaurant => {
      // Create marker for each restaurant
      // In a real implementation, this would add actual markers to the map
      newMarkers.push({
        id: restaurant.id,
        position: { lat: restaurant.lat, lng: restaurant.lng },
        data: restaurant
      });
    });
    
    setMarkers(newMarkers);
    setInfoCard(null);
  };

  const handleCountryChange = (value) => {
    setSelectedCountry(value);
  };

  const simulateDataUpdate = () => {
    // This would trigger the Perplexity API search to update the database
    // For the prototype, we'll just update the last updated date
    setLastUpdated(`May 15, 2025`);
    alert("Database updated with latest Top Chef restaurant information!");
  };

  const showRestaurantInfo = (marker) => {
    setInfoCard(marker.data);
  };

  return (
    <div className="w-full h-full flex flex-col">
      <div className="p-4 bg-slate-100 border-b">
        <div className="container mx-auto flex flex-col md:flex-row items-center justify-between gap-4">
          <div className="flex items-center gap-2">
            <h1 className="text-2xl font-bold">Top Chef Restaurant Map</h1>
            <Button 
              variant="ghost" 
              className="h-8 w-8 p-0 rounded-full" 
              onClick={() => alert("This app shows restaurants owned or operated by Top Chef contestants worldwide.")}
            >
              <Info className="h-4 w-4" />
            </Button>
          </div>
          
          <div className="flex items-center gap-4">
            <div className="flex items-center gap-2">
              <label className="text-sm font-medium">Country:</label>
              <Select value={selectedCountry} onValueChange={handleCountryChange}>
                <SelectTrigger className="w-32">
                  <SelectValue placeholder="Select country" />
                </SelectTrigger>
                <SelectContent>
                  {countries.map(country => (
                    <SelectItem key={country} value={country}>
                      {country}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            
            <Button 
              variant="outline" 
              size="sm" 
              className="flex items-center gap-2"
              onClick={simulateDataUpdate}
            >
              <RotateCcw className="h-4 w-4" />
              <span>Update Data</span>
            </Button>
            
            <div className="text-xs text-gray-500">
              Last updated: {lastUpdated}
            </div>
          </div>
        </div>
      </div>
      
      <div className="flex flex-1 overflow-hidden">
        <div className="w-full h-full flex">
          {/* Map visualization */}
          <div className="flex-1 relative bg-blue-50 p-4">
            <div className="absolute top-4 left-4 right-4 bottom-4 bg-white rounded-lg shadow-md p-6">
              <div className="text-center text-gray-400 mb-4">Interactive Map Visualization</div>
              
              {/* Simplified map representation */}
              <div className="w-full h-5/6 bg-gray-200 rounded-lg flex flex-wrap p-4 gap-4 overflow-auto">
                {markers.map(marker => (
                  <button
                    key={marker.id}
                    className="h-12 w-12 rounded-full bg-red-500 text-white font-bold flex items-center justify-center hover:bg-red-600 transition-colors"
                    onClick={() => showRestaurantInfo(marker)}
                  >
                    S{marker.data.season}
                  </button>
                ))}
                
                {markers.length === 0 && (
                  <div className="w-full h-full flex items-center justify-center text-gray-500">
                    No restaurants found in this country
                  </div>
                )}
              </div>
              
              <div className="mt-4 text-xs text-gray-500">
                * Click on season markers (S1, S2, etc.) to view restaurant details
              </div>
            </div>
          </div>
          
          {/* Info panel */}
          <div className="w-80 border-l bg-white overflow-y-auto">
            {infoCard ? (
              <Card className="border-0 rounded-none h-full">
                <CardHeader className="pb-2">
                  <CardTitle className="text-xl">{infoCard.restaurantName}</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div>
                      <h3 className="text-sm font-semibold mb-1">Chef</h3>
                      <p>{infoCard.chefName}</p>
                    </div>
                    
                    <div>
                      <h3 className="text-sm font-semibold mb-1">Top Chef Season</h3>
                      <p>Season {infoCard.season}</p>
                    </div>
                    
                    <div>
                      <h3 className="text-sm font-semibold mb-1">Location</h3>
                      <p>{infoCard.city}, {selectedCountry}</p>
                      <p className="text-xs text-gray-500 mt-1">
                        Lat: {infoCard.lat.toFixed(4)}, Lng: {infoCard.lng.toFixed(4)}
                      </p>
                    </div>
                    
                    <Button 
                      variant="outline" 
                      size="sm" 
                      className="w-full"
                      onClick={() => alert(`Opening directions to ${infoCard.restaurantName}`)}
                    >
                      Get Directions
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ) : (
              <div className="h-full flex items-center justify-center p-8 text-center text-gray-500">
                Click on a restaurant marker to view details
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default TopChefMap;